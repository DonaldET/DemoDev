import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

/**
 * Formatted (almost) as required for Leet Code submission (68.25%)
 * 
 * @author Donald Trummell <dtrummell@gmail.com>
 */
class Solution
{
    static final class SolutionMergeComparator implements Comparator<Interval>
    {
        @Override
        public int compare(final Interval a, final Interval b)
        {
            return a.start < b.start ? -1 : (a.start > b.start ? 1 : (a.end < b.end ? -1 : (a.end > b.end ? 1 : 0)));
        }
    }

    public List<Interval> merge(final List<Interval> intervals)
    {
        Collections.sort(intervals, new SolutionMergeComparator());
        final int n = intervals.size();
        if (n < 2)
        {
            return intervals;
        }

        int merges = 0;
        int lhs_pos = 0;
        int rhs_pos = 1;

        do
        {
            final Interval lhs = intervals.get(lhs_pos);
            final Interval rhs = intervals.get(rhs_pos);
            if (rhs.start <= lhs.end)
            {
                // Overlap
                rhs.start = lhs.start;
                rhs.end = Math.max(lhs.end, rhs.end);
                intervals.set(lhs_pos, null);
                merges += 1;
            }
            lhs_pos = rhs_pos;
            rhs_pos++;
        }
        while (rhs_pos < n);

        final List<Interval> merged = new ArrayList<Interval>(n - merges);
        for (final Interval intr : intervals)
        {
            if (intr != null)
                merged.add(intr);
        }

        return merged;
    }
}
